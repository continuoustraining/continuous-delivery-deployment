<project name="continuous-deployment" default="help" basedir=".">
    <property file="./build.properties" />
    
    <import file="./vendor/continuousphp/aws-sdk-phing/tasks.xml" />
    <property name="aws.profile" value="" />
    
    <target name="help" description="List available targets">
        <exec executable="${project.basedir}/vendor/bin/phing"
              passthru="true">
            <arg value="-l"/>    
        </exec>
    </target>
    
    <target name="setup-aws">
        <aws-config region="${aws.region}" profile="${aws.profile}" />
    </target>

    <target name="run-stack">
        <if>
            <equals arg1="single-server" arg2="${cf.template}" />
            <then>
                <aws-cf-runstack
                        name="training${cf.stackName}"
                        updateOnConflict="true"
                        capabilities="CAPABILITY_IAM"
                        templatePath="./infra/${cf.template}.template">
                    <param name="KeyName" value="${cf.KeyName}" />
                    <param name="env" value="${cf.stackName}" />
                </aws-cf-runstack>
            </then>
            <else>
                <aws-cf-runstack
                        name="training${cf.stackName}"
                        updateOnConflict="true"
                        capabilities="CAPABILITY_IAM"
                        templatePath="./infra/${cf.template}.template">
                    <param name="KeyName" value="${cf.KeyName}" />
                    <param name="DBName" value="${cf.DBName}" />
                    <param name="DBUser" value="${cf.DBUser}" />
                    <param name="DBPassword" value="${cf.DBPassword}" />
                    <param name="env" value="${cf.stackName}" />
                    <output name="AutoscalingGroup" property="deploy.autoScalingGroup" />
                </aws-cf-runstack>
            </else>
        </if>
    </target>
    
    <target name="migrate">

        <pdosqlexec url="mysql:host=${db.host};dbname=${db.name}" userid="${db.user}" password="${db.password}">
            <transaction src="${project.basedir}/resources/data/db.sql"/>
        </pdosqlexec>

        <!-- generate the deployment scripts -->
        <dbdeploy url="mysql:host=${db.host};dbname=${db.name}"
                  userid="${db.user}"
                  password="${db.password}"
                  dir="${project.basedir}/resources/data/deltas"
                  outputfile="/tmp/dbdeploy_deploy.sql"
                  undooutputfile="/tmp/dbdeploy_undo.sql" />

        <!-- execute the SQL -->
        <exec command="mysql -u${db.user} -h${db.host} -p${db.password} ${db.name} &lt; /tmp/dbdeploy_deploy.sql" />
        <delete file="/tmp/dbdeploy_deploy.sql" />
    </target>

    <target name="setup-deployment-group">
        <if>
            <equals arg1="single-server" arg2="${cf.template}" />
            <then>
                <aws-deploy-deployment-group
                        name="${cf.stackName}"
                        updateOnConflict="true"
                        deploymentConfigName="CodeDeployDefault.OneAtATime"
                        serviceRole="${deploy.serviceRole}"
                        application="${deploy.applicationName}">
                    <ec2TagFilter key="env" value="${cf.stackName}" />
                </aws-deploy-deployment-group>
            </then>
            <else>
                <aws-deploy-deployment-group
                        name="${cf.stackName}"
                        updateOnConflict="true"
                        deploymentConfigName="CodeDeployDefault.OneAtATime"
                        serviceRole="${deploy.serviceRole}"
                        application="${deploy.applicationName}">
                    <autoScalingGroup name="${deploy.autoScalingGroup}" />
                </aws-deploy-deployment-group>
            </else>
        </if>
    </target>

    <target name="link-docroot" description="Link site document root to Apache document root">
        <symlink link="${server.docroot}" target="${project.basedir}/public" overwrite="true" />
    </target>

    
    <target name="provision-stack"
            description="Provision a stack on AWS"
            depends="setup-aws, run-stack, setup-deployment-group" />
</project>